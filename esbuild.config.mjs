import { copyFileSync } from 'fs';
import esbuild from 'esbuild';
import { join } from 'path';
import process from 'process';
import { sassPlugin } from 'esbuild-sass-plugin';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const prod = process.argv[2] === 'production';
const vaultPath = process.argv[3];

function devCopy(error) {
  if (vaultPath && !error) {
    try {
      const copyPath = join(vaultPath, '.obsidian/plugins/auto-class');
      process.stdout.write(`Copying to ${copyPath}...`);
      copyFileSync('main.js', join(vaultPath, '.obsidian/plugins/auto-class/main.js'));
      copyFileSync('manifest.json', join(vaultPath, '.obsidian/plugins/auto-class/manifest.json'));
      copyFileSync('styles.css', join(vaultPath, '.obsidian/plugins/auto-class/styles.css'));
      process.stdout.write('Done.\n');
    } catch {
      process.stdout.write('\n****COULD NOT COPY FILES****\n');
    }
  }
}

esbuild
  .build({
    banner: {
      js: banner
    },
    entryPoints: ['src/main.ts', 'src/styles.scss'],
    bundle: true,
    external: ['obsidian'],
    format: 'cjs',
    outdir: '.',
    outbase: 'src',
    watch: !prod ? { onRebuild: devCopy } : false,
    target: 'es2016',
    logLevel: 'info',
    sourcemap: prod ? false : 'inline',
    minify: prod,
    treeShaking: true,
    plugins: [sassPlugin({ cache: !prod })]
  })
  .then(() => {
    if (!prod) {
      devCopy(false);
    }
  })
  .catch(() => process.exit(1));
